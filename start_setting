#!/usr/bin/env python3
import os
import subprocess
import sys
import platform

# Конфигурация
BURP_VERSION = "2023.12.1"  # Версия Burp Suite (можно изменить)
REQUIRED_DISK_SPACE_MB = 200  # Требуемое свободное место в MB

# Цвета ANSI для вывода сообщений
COLOR_GREEN = "\033[92m"
COLOR_RED = "\033[91m"
COLOR_YELLOW = "\033[93m"
COLOR_RESET = "\033[0m"

def print_ascii_banner():
    banner = f"""{COLOR_YELLOW}


███████╗██╗         ██████╗ ███████╗██████╗     ████████╗███████╗ █████╗ ███╗   ███╗
██╔════╝██║         ██╔══██╗██╔════╝██╔══██╗    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║
███████╗██║         ██████╔╝█████╗  ██║  ██║       ██║   █████╗  ███████║██╔████╔██║
╚════██║██║         ██╔══██╗██╔══╝  ██║  ██║       ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║
███████║███████╗    ██║  ██║███████╗██████╔╝       ██║   ███████╗██║  ██║██║ ╚═╝ ██║
╚══════╝╚══════╝    ╚═╝  ╚═╝╚══════╝╚═════╝        ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝
                                                                                  
{COLOR_RESET}"""
    print(banner)

def success(msg):
    print(f"{COLOR_GREEN}{msg}{COLOR_RESET}")

def error(msg):
    print(f"{COLOR_RED}{msg}{COLOR_RESET}")

def warning(msg):
    print(f"{COLOR_YELLOW}{msg}{COLOR_RESET}")

def is_linux():
    """Проверяет, что скрипт запущен в Linux"""
    return platform.system() == "Linux"

def is_root():
    """Проверяет права root в Linux"""
    if not is_linux():
        return False
    try:
        return os.getuid() == 0
    except AttributeError:
        # Fallback для систем без getuid
        return False

def ensure_directory_exists(path):
    """Создает директорию, если она не существует"""
    if not os.path.exists(path):
        try:
            os.makedirs(path, exist_ok=True)
            print(f"Создана директория: {path}")
        except OSError as e:
            error(f"Не удалось создать директорию {path}: {e}")
            return False
    return True

def check_disk_space(required_mb=REQUIRED_DISK_SPACE_MB):
    """Проверяет свободное место на диске"""
    try:
        statvfs = os.statvfs('/')
        free_space_mb = (statvfs.f_frsize * statvfs.f_bavail) / (1024 * 1024)
        if free_space_mb < required_mb:
            warning(f"Мало свободного места: {free_space_mb:.1f}MB. Требуется: {required_mb}MB")
            return False
        return True
    except OSError as e:
        warning(f"Не удалось проверить свободное место: {e}")
        return True  # Продолжаем выполнение, если не можем проверить

def check_wget():
    """Проверяет наличие wget и устанавливает при необходимости"""
    result = subprocess.run(['which', 'wget'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode != 0:
        print("wget не найден. Установка...")
        try:
            subprocess.run(['apt', 'install', '-y', 'wget'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            success("wget успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке wget.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(stderr_out)
            return False
    return True

def apt_update_upgrade():
    if ask_update():
        try:
            print("Обновление списка репозиториев (apt update)...")
            subprocess.run(['apt', 'update', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("Обновление пакетов (apt upgrade)...")
            subprocess.run(['apt', 'upgrade', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            success("Пакеты успешно обновлены.")
        except subprocess.CalledProcessError:
            error("Возникла ошибка при обновлении пакетов.")
            return False  # Возвращаем False вместо выхода из программы
    else:
        print("Пропуск обновления пакетов.")

def check_or_install_package(pkgname, desc):
    print(f"Проверка, установлен ли пакет {desc}...")
    try:
        result = subprocess.run(['dpkg', '-s', pkgname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            success(f"Пакет {desc} уже установлен.")
        else:
            print(f"{desc} не установлен. Установка...")
            try:
                proc = subprocess.run(
                    ['apt', 'install', '-y', pkgname],
                    check=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.PIPE
                )
                success(f"Пакет {desc} успешно установлен.")
            except subprocess.CalledProcessError as e:
                error(f"Ошибка при установке пакета {desc}.")
                stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
                warning(stderr_out)
                return False  # Возвращаем False вместо выхода из программы
    except FileNotFoundError:
        error("Команда dpkg не найдена. Убедитесь, что вы в Linux-окружении.")
        return False  # Возвращаем False вместо выхода из программы
    except Exception as e:
        error(f"Неожиданная ошибка при проверке пакета {desc}: {e}")
        return False  # Возвращаем False вместо выхода из программы

def check_and_extract_rockyou():
    """Проверка и распаковка словаря rockyou"""
    rockyou_txt = "/usr/share/wordlists/rockyou.txt"
    rockyou_gz = "/usr/share/wordlists/rockyou.txt.gz"
    rockyou_tar_gz = "/usr/share/wordlists/rockyou.tar.gz"

    # Ensure wordlists directory exists
    if not ensure_directory_exists('/usr/share/wordlists'):
        error("Не удалось создать директорию /usr/share/wordlists")
        return False

    if os.path.isfile(rockyou_txt):
        success("Словарь rockyou готов к использованию.")
        return True

    if os.path.isfile(rockyou_gz):
        print("Файл rockyou.txt не найден, но найден архив rockyou.txt.gz. Распаковываем...")
        try:
            subprocess.run(['gunzip', '-kf', rockyou_gz], check=True)
            if os.path.isfile(rockyou_txt):
                success("Словарь rockyou успешно распакован и готов к использованию.")
                return True
            else:
                error("Ошибка: не удалось распаковать rockyou.txt.gz.")
                return False
        except subprocess.CalledProcessError as e:
            error("Ошибка при распаковке rockyou.txt.gz.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(f"Детали ошибки: {stderr_out}")
            return False
        except FileNotFoundError:
            error("Команда gunzip не найдена. Установите gzip.")
            return False

    if os.path.isfile(rockyou_tar_gz):
        print("Файл rockyou.txt не найден, но найден архив rockyou.tar.gz. Распаковываем...")
        try:
            subprocess.run(['tar', 'xfz', rockyou_tar_gz, '-C', '/usr/share/wordlists/'], check=True)
            if os.path.isfile(rockyou_txt):
                success("Словарь rockyou успешно распакован и готов к использованию.")
                return True
            else:
                error("Ошибка: не удалось распаковать rockyou.tar.gz.")
                return False
        except subprocess.CalledProcessError as e:
            error("Ошибка при распаковке rockyou.tar.gz.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(f"Детали ошибки: {stderr_out}")
            return False
        except FileNotFoundError:
            error("Команда tar не найдена. Установите tar.")
            return False

    warning("Словарь rockyou.txt и архивы не найдены. Установите пакет seclists, если ещё не установлен.")
    return False

def check_or_install_wpscan():
    print("Проверка, установлен ли WPScan...")
    try:
        result = subprocess.run(['dpkg', '-s', 'wpscan'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            success("Пакет WPScan уже установлен.")
        else:
            print("WPScan не установлен. Установка...")
            try:
                proc = subprocess.run(
                    ['apt', 'install', '-y', 'wpscan'],
                    check=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.PIPE
                )
                success("Пакет WPScan успешно установлен.")
            except subprocess.CalledProcessError as e:
                error("Ошибка при установке пакета WPScan.")
                stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
                warning(stderr_out)
                return False  # Возвращаем False вместо выхода из программы
        update_wpscan_db()
    except FileNotFoundError:
        error("Команда dpkg не найдена. Убедитесь, что вы в Linux-окружении.")
        return False  # Возвращаем False вместо выхода из программы
    except Exception as e:
        error(f"Неожиданная ошибка при работе с WPScan: {e}")
        return False  # Возвращаем False вместо выхода из программы

def update_wpscan_db():
    print("Запуск обновления базы WPScan...")
    try:
        proc = subprocess.run(['wpscan', '--update'], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        success("База уязвимостей WPScan успешно обновлена.")
    except subprocess.CalledProcessError as e:
        error("Ошибка при обновлении базы WPScan.")
        stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
        warning(f"Детали ошибки: {stderr_out}")
    except FileNotFoundError:
        error("Команда wpscan не найдена. Убедитесь, что WPScan установлен.")
    except Exception as e:
        error(f"Неожиданная ошибка при обновлении WPScan: {e}")

def check_or_install_burpsuite():
    print("Проверка, установлен ли Burp Suite Community...")
    
    # Check if burpsuite is already installed
    result = subprocess.run(['which', 'burpsuite'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        success("Burp Suite Community уже установлен.")
        return  # Возвращаемся в главное меню
    
    # Check disk space before downloading
    if not check_disk_space():
        warning("Продолжаем установку, но может не хватить места...")
    
    # Check if wget is available
    if not check_wget():
        error("Не удалось установить wget. Установка Burp Suite прервана.")
        return
    
    # Check if Java is installed (required for Burp Suite)
    print("Проверка Java...")
    java_result = subprocess.run(['java', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if java_result.returncode != 0:
        print("Java не установлен. Установка OpenJDK...")
        try:
            subprocess.run(['apt', 'install', '-y', 'openjdk-11-jdk'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            success("OpenJDK 11 успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке Java.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(stderr_out)
            return
        except FileNotFoundError:
            error("Команда apt не найдена. Убедитесь, что вы в Linux-окружении.")
            return
    
    # Download and install Burp Suite Community
    print("Загрузка Burp Suite Community Edition...")
    burp_url = f"https://portswigger.net/burp/releases/download?product=community&version={BURP_VERSION}&type=jar"
    burp_jar = "/opt/burpsuite-community.jar"
    
    try:
        # Ensure directories exist
        if not ensure_directory_exists('/opt'):
            error("Не удалось создать директорию /opt")
            return
        
        if not ensure_directory_exists('/usr/share/applications'):
            error("Не удалось создать директорию /usr/share/applications")
            return
        
        if not ensure_directory_exists('/usr/local/bin'):
            error("Не удалось создать директорию /usr/local/bin")
            return
        
        # Download Burp Suite
        print("Загружаем Burp Suite (это может занять некоторое время)...")
        subprocess.run(['wget', '-O', burp_jar, burp_url], check=True, 
                      stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        success("Burp Suite Community успешно загружен.")
        
        # Create desktop entry
        desktop_entry = f"""[Desktop Entry]
Version=1.0
Type=Application
Name=Burp Suite Community
Comment=Web Application Security Testing Platform
Exec=java -jar {burp_jar}
Icon=burpsuite
Terminal=false
Categories=Network;Security;
"""
        
        with open('/usr/share/applications/burpsuite.desktop', 'w') as f:
            f.write(desktop_entry)
        
        # Create launcher script
        launcher_script = f"""#!/bin/bash
java -jar {burp_jar} "$@"
"""
        
        with open('/usr/local/bin/burpsuite', 'w') as f:
            f.write(launcher_script)
        
        subprocess.run(['chmod', '+x', '/usr/local/bin/burpsuite'], check=True)
        subprocess.run(['chmod', '+x', burp_jar], check=True)
        
        success("Burp Suite Community успешно установлен!")
        success("Запуск: burpsuite или через меню приложений")
        
    except subprocess.CalledProcessError as e:
        error("Ошибка при установке Burp Suite Community.")
        stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
        warning(f"Детали ошибки: {stderr_out}")
        if "404" in stderr_out:
            warning("Возможно, версия Burp Suite устарела. Проверьте актуальную версию на сайте.")
    except FileNotFoundError as e:
        error(f"Файл не найден: {e}")
    except PermissionError as e:
        error(f"Ошибка прав доступа: {e}")
    except OSError as e:
        error(f"Ошибка операционной системы: {e}")
    except Exception as e:
        error(f"Неожиданная ошибка при установке Burp Suite: {e}")
        warning("Проверьте логи для получения дополнительной информации.")

def ask_update():
    prompt = f"{COLOR_YELLOW}Обновить пакеты? [y/n]: {COLOR_RESET}"
    while True:
        try:
            answer = input(prompt).strip().lower()
        except EOFError:
            error("Ввод недоступен! Запустите скрипт в интерактивном режиме из-под root или с sudo.")
            return False  # Возвращаем False вместо выхода из программы
        if answer in ['y', 'yes', 'д', 'да']:
            return True
        elif answer in ['n', 'no', 'н', 'нет']:
            return False
        else:
            print("Ответ не распознан. Пожалуйста, введите y/д/yes/да или n/н/no/нет.")

def check_or_install_pre2k():
    """Установка pre2k - инструмента для восстановления паролей"""
    print("Проверка, установлен ли pre2k...")
    
    # Check if pre2k is already installed
    result = subprocess.run(['which', 'pre2k'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        success("pre2k уже установлен.")
        return True
    
    print("pre2k не установлен. Установка...")
    
    # Check if git is available
    git_result = subprocess.run(['which', 'git'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if git_result.returncode != 0:
        print("git не найден. Установка...")
        try:
            subprocess.run(['apt', 'install', '-y', 'git'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            success("git успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке git.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(f"Детали ошибки: {stderr_out}")
            return False
    
    # Check if make is available
    make_result = subprocess.run(['which', 'make'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if make_result.returncode != 0:
        print("make не найден. Установка...")
        try:
            subprocess.run(['apt', 'install', '-y', 'make'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            success("make успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке make.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(f"Детали ошибки: {stderr_out}")
            return False
    
    # Clone and build pre2k
    pre2k_dir = "/opt/pre2k"
    try:
        # Ensure /opt directory exists
        if not ensure_directory_exists('/opt'):
            error("Не удалось создать директорию /opt")
            return False
        
        # Clone pre2k repository
        print("Клонирование репозитория pre2k...")
        if os.path.exists(pre2k_dir):
            print("Директория pre2k уже существует. Обновление...")
            subprocess.run(['git', 'pull'], cwd=pre2k_dir, check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        else:
            subprocess.run(['git', 'clone', 'https://github.com/OpenSecurityResearch/pre2k.git', pre2k_dir], 
                         check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        
        success("pre2k успешно клонирован.")
        
        # Build pre2k
        print("Сборка pre2k...")
        subprocess.run(['make'], cwd=pre2k_dir, check=True, 
                     stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        success("pre2k успешно собран.")
        
        # Create symlink to /usr/local/bin
        subprocess.run(['ln', '-sf', f'{pre2k_dir}/pre2k', '/usr/local/bin/pre2k'], check=True)
        subprocess.run(['chmod', '+x', '/usr/local/bin/pre2k'], check=True)
        
        success("pre2k успешно установлен!")
        success("Запуск: pre2k")
        
        return True
        
    except subprocess.CalledProcessError as e:
        error("Ошибка при установке pre2k.")
        stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
        warning(f"Детали ошибки: {stderr_out}")
        return False
    except FileNotFoundError as e:
        error(f"Файл не найден: {e}")
        return False
    except PermissionError as e:
        error(f"Ошибка прав доступа: {e}")
        return False
    except Exception as e:
        error(f"Неожиданная ошибка при установке pre2k: {e}")
        return False

def install_seclists_and_rockyou():
    """Установка seclists и распаковка rockyou"""
    print("Установка seclists и настройка rockyou...")
    
    # Check current status
    seclists_installed = False
    rockyou_available = False
    
    # Check if seclists is already installed
    print("Проверка статуса seclists...")
    seclists_result = subprocess.run(['dpkg', '-s', 'seclists'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if seclists_result.returncode == 0:
        success("seclists уже установлен.")
        seclists_installed = True
    else:
        print("seclists не установлен. Установка...")
        if check_or_install_package('seclists', 'seclists'):
            seclists_installed = True
        else:
            error("Не удалось установить seclists.")
            return False
    
    # Check if rockyou is already available
    print("Проверка статуса rockyou...")
    rockyou_txt = "/usr/share/wordlists/rockyou.txt"
    if os.path.isfile(rockyou_txt):
        success("rockyou.txt уже доступен.")
        rockyou_available = True
    else:
        print("rockyou.txt не найден. Попытка распаковки...")
        check_and_extract_rockyou()
        if os.path.isfile(rockyou_txt):
            rockyou_available = True
            success("rockyou.txt успешно распакован.")
        else:
            warning("rockyou.txt не удалось распаковать. Возможно, seclists не содержит rockyou.")
    
    # Summary
    if seclists_installed and rockyou_available:
        success("seclists и rockyou успешно настроены!")
        return True
    elif seclists_installed and not rockyou_available:
        warning("seclists установлен, но rockyou.txt недоступен.")
        warning("Попробуйте переустановить seclists или скачать rockyou вручную.")
        return False
    else:
        error("Не удалось настроить seclists и rockyou.")
        return False

def system_update_only():
    """Только обновление системы"""
    print("Обновление системы...")
    return apt_update_upgrade()

def additional_packages_manual_menu():
    while True:
        print(f"\n{COLOR_YELLOW}Хотите установить дополнительный пакет? (введите название пакета или 0 для выхода){COLOR_RESET}")
        try:
            pkgname = input("Название пакета: ").strip()
        except EOFError:
            error("Ввод недоступен! Запустите скрипт в интерактивном режиме.")
            break
        except KeyboardInterrupt:
            print("\nВыход из меню дополнительных пакетов.")
            break
        
        if pkgname == "" or pkgname == "0":
            print("Выход из меню дополнительных пакетов.")
            break
        
        print(f"Проверка, установлен ли пакет {pkgname}...")
        try:
            result = subprocess.run(['dpkg', '-s', pkgname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            if result.returncode == 0:
                success(f"Пакет {pkgname} уже установлен.")
            else:
                warning(f"Пакет {pkgname} не найден. Пытаемся установить...")
                try:
                    proc = subprocess.run(
                        ['apt', 'install', '-y', pkgname],
                        check=True,
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.PIPE
                    )
                    success(f"Пакет {pkgname} успешно установлен.")
                except subprocess.CalledProcessError as e:
                    error(f"Ошибка при установке пакета {pkgname}!")
                    stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
                    warning(f"Детали ошибки: {stderr_out}")
        except FileNotFoundError:
            error("Команда dpkg не найдена. Убедитесь, что вы в Linux-окружении.")
            break
        except Exception as e:
            error(f"Неожиданная ошибка при работе с пакетом {pkgname}: {e}")

def main_menu():
    print_ascii_banner()
    print(f"{COLOR_YELLOW}Главное меню:{COLOR_RESET}")
    print("1. Полная установка (базовые пакеты и опции)")
    print("2. Установка дополнительного пакета")
    print("3. Установка Burp Suite Community")
    print("4. Установка WPScan")
    print("5. Установка seclists и rockyou")
    print("6. Установка pre2k (Password Recovery Tool)")
    print("7. Обновление системы")
    print("8. Выйти")
    while True:
        choice = input("Выберите действие (1-8): ").strip()
        if choice in ["1", "2", "3", "4", "5", "6", "7", "8"]:
            return choice
        else:
            warning("Неверный выбор! Введите 1, 2, 3, 4, 5, 6, 7 или 8.")

if __name__ == "__main__":
    # Проверка операционной системы
    if not is_linux():
        error("Этот скрипт предназначен для Kali Linux.")
        error("Запустите его в Linux-окружении (например, в Docker-контейнере).")
        error("Для тестирования в Windows используйте: docker run -it --rm -v ${PWD}:/workspace kalilinux/kali-rolling")
        sys.exit(1)
    
    if not is_root():
        error("Скрипт должен быть запущен от root. Используйте: sudo python3 start_setting")
        sys.exit(1)

    # Главный цикл программы
    while True:
        action = main_menu()
        if action == "1":
            # Полная установка
            apt_update_upgrade()
            check_or_install_package('seclists', 'seclists')
            check_and_extract_rockyou()
            check_or_install_wpscan()
            check_or_install_burpsuite()
            check_or_install_pre2k()
            additional_packages_manual_menu()
        elif action == "2":
            # Только установка дополнительных пакетов
            additional_packages_manual_menu()
        elif action == "3":
            # Установка Burp Suite Community
            check_or_install_burpsuite()
        elif action == "4":
            # Установка WPScan
            check_or_install_wpscan()
        elif action == "5":
            # Установка seclists и rockyou
            install_seclists_and_rockyou()
        elif action == "6":
            # Установка pre2k
            check_or_install_pre2k()
        elif action == "7":
            # Обновление системы
            system_update_only()
        elif action == "8":
            print("Выход.")
            sys.exit(0)
        
        # После выполнения действия возвращаемся в главное меню
        print(f"\n{COLOR_YELLOW}Нажмите Enter для возврата в главное меню...{COLOR_RESET}")
        try:
            input()
        except (EOFError, KeyboardInterrupt):
            print("\nВыход из программы.")
            sys.exit(0)
