#!/usr/bin/env python3
import os
import subprocess
import sys

# Цвета ANSI для вывода сообщений
COLOR_GREEN = "\033[92m"
COLOR_RED = "\033[91m"
COLOR_YELLOW = "\033[93m"
COLOR_RESET = "\033[0m"

def print_ascii_banner():
    banner = f"""{COLOR_YELLOW}


███████╗██╗         ██████╗ ███████╗██████╗     ████████╗███████╗ █████╗ ███╗   ███╗
██╔════╝██║         ██╔══██╗██╔════╝██╔══██╗    ╚══██╔══╝██╔════╝██╔══██╗████╗ ████║
███████╗██║         ██████╔╝█████╗  ██║  ██║       ██║   █████╗  ███████║██╔████╔██║
╚════██║██║         ██╔══██╗██╔══╝  ██║  ██║       ██║   ██╔══╝  ██╔══██║██║╚██╔╝██║
███████║███████╗    ██║  ██║███████╗██████╔╝       ██║   ███████╗██║  ██║██║ ╚═╝ ██║
╚══════╝╚══════╝    ╚═╝  ╚═╝╚══════╝╚═════╝        ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝
                                                                                  
{COLOR_RESET}"""
    print(banner)

def success(msg):
    print(f"{COLOR_GREEN}{msg}{COLOR_RESET}")

def error(msg):
    print(f"{COLOR_RED}{msg}{COLOR_RESET}")

def warning(msg):
    print(f"{COLOR_YELLOW}{msg}{COLOR_RESET}")

def is_root():
    return os.geteuid() == 0

def apt_update_upgrade():
    if ask_update():
        try:
            print("Обновление списка репозиториев (apt update)...")
            subprocess.run(['apt', 'update', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("Обновление пакетов (apt upgrade)...")
            subprocess.run(['apt', 'upgrade', '-y'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            success("Пакеты успешно обновлены.")
        except subprocess.CalledProcessError:
            error("Возникла ошибка при обновлении пакетов.")
            sys.exit(1)
    else:
        print("Пропуск обновления пакетов.")

def check_or_install_package(pkgname, desc):
    print(f"Проверка, установлен ли пакет {desc}...")
    result = subprocess.run(['dpkg', '-s', pkgname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        success(f"Пакет {desc} уже установлен.")
    else:
        print(f"{desc} не установлен. Установка...")
        try:
            proc = subprocess.run(
                ['apt', 'install', '-y', pkgname],
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.PIPE
            )
            success(f"Пакет {desc} успешно установлен.")
        except subprocess.CalledProcessError as e:
            error(f"Ошибка при установке пакета {desc}.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(stderr_out)
            sys.exit(1)

def check_and_extract_rockyou():
    rockyou_txt = "/usr/share/wordlists/rockyou.txt"
    rockyou_gz = "/usr/share/wordlists/rockyou.txt.gz"
    rockyou_tar_gz = "/usr/share/wordlists/rockyou.tar.gz"

    if os.path.isfile(rockyou_txt):
        success("Словарь rockyou готов к использованию.")
        return

    if os.path.isfile(rockyou_gz):
        print("Файл rockyou.txt не найден, но найден архив rockyou.txt.gz. Распаковываем...")
        try:
            subprocess.run(['gunzip', '-kf', rockyou_gz], check=True)
            if os.path.isfile(rockyou_txt):
                success("Словарь rockyou успешно распакован и готов к использованию.")
            else:
                error("Ошибка: не удалось распаковать rockyou.txt.gz.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при распаковке rockyou.txt.gz.")
            warning(str(e))
        return

    if os.path.isfile(rockyou_tar_gz):
        print("Файл rockyou.txt не найден, но найден архив rockyou.tar.gz. Распаковываем...")
        try:
            subprocess.run(['tar', 'xfz', rockyou_tar_gz, '-C', '/usr/share/wordlists/'], check=True)
            if os.path.isfile(rockyou_txt):
                success("Словарь rockyou успешно распакован и готов к использованию.")
            else:
                error("Ошибка: не удалось распаковать rockyou.tar.gz.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при распаковке rockyou.tar.gz.")
            warning(str(e))
        return

    warning("Словарь rockyou.txt и архивы не найдены. Установите пакет seclists, если ещё не установлен.")

def check_or_install_wpscan():
    print("Проверка, установлен ли WPScan...")
    result = subprocess.run(['dpkg', '-s', 'wpscan'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        success("Пакет WPScan уже установлен.")
    else:
        print("WPScan не установлен. Установка...")
        try:
            proc = subprocess.run(
                ['apt', 'install', '-y', 'wpscan'],
                check=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.PIPE
            )
            success("Пакет WPScan успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке пакета WPScan.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(stderr_out)
            sys.exit(1)
    update_wpscan_db()

def update_wpscan_db():
    print("Запуск обновления базы WPScan...")
    try:
        proc = subprocess.run(['wpscan', '--update'], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        success("База уязвимостей WPScan успешно обновлена.")
    except subprocess.CalledProcessError as e:
        error("Ошибка при обновлении базы WPScan.")
        stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
        warning(stderr_out)

def check_or_install_burpsuite():
    print("Проверка, установлен ли Burp Suite Community...")
    
    # Check if burpsuite is already installed
    result = subprocess.run(['which', 'burpsuite'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if result.returncode == 0:
        success("Burp Suite Community уже установлен.")
        return
    
    # Check if Java is installed (required for Burp Suite)
    print("Проверка Java...")
    java_result = subprocess.run(['java', '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if java_result.returncode != 0:
        print("Java не установлен. Установка OpenJDK...")
        try:
            subprocess.run(['apt', 'install', '-y', 'openjdk-11-jdk'], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
            success("OpenJDK 11 успешно установлен.")
        except subprocess.CalledProcessError as e:
            error("Ошибка при установке Java.")
            stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
            warning(stderr_out)
            return
    
    # Download and install Burp Suite Community
    print("Загрузка Burp Suite Community Edition...")
    burp_url = "https://portswigger.net/burp/releases/download?product=community&version=2023.12.1&type=jar"
    burp_jar = "/opt/burpsuite-community.jar"
    
    try:
        # Create /opt directory if it doesn't exist
        subprocess.run(['mkdir', '-p', '/opt'], check=True)
        
        # Download Burp Suite
        subprocess.run(['wget', '-O', burp_jar, burp_url], check=True, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        success("Burp Suite Community успешно загружен.")
        
        # Create desktop entry
        desktop_entry = f"""[Desktop Entry]
Version=1.0
Type=Application
Name=Burp Suite Community
Comment=Web Application Security Testing Platform
Exec=java -jar {burp_jar}
Icon=burpsuite
Terminal=false
Categories=Network;Security;
"""
        
        with open('/usr/share/applications/burpsuite.desktop', 'w') as f:
            f.write(desktop_entry)
        
        # Create launcher script
        launcher_script = f"""#!/bin/bash
java -jar {burp_jar} "$@"
"""
        
        with open('/usr/local/bin/burpsuite', 'w') as f:
            f.write(launcher_script)
        
        subprocess.run(['chmod', '+x', '/usr/local/bin/burpsuite'], check=True)
        subprocess.run(['chmod', '+x', burp_jar], check=True)
        
        success("Burp Suite Community успешно установлен!")
        success("Запуск: burpsuite или через меню приложений")
        
    except subprocess.CalledProcessError as e:
        error("Ошибка при установке Burp Suite Community.")
        stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
        warning(stderr_out)
    except Exception as e:
        error(f"Неожиданная ошибка при установке Burp Suite: {e}")

def ask_update():
    prompt = f"{COLOR_YELLOW}Обновить пакеты? [y/n]: {COLOR_RESET}"
    while True:
        try:
            answer = input(prompt).strip().lower()
        except EOFError:
            error("Ввод недоступен! Запустите скрипт в интерактивном режиме из-под root или с sudo.")
            sys.exit(2)
        if answer in ['y', 'yes', 'д', 'да']:
            return True
        elif answer in ['n', 'no', 'н', 'нет']:
            return False
        else:
            print("Ответ не распознан. Пожалуйста, введите y/д/yes/да или n/н/no/нет.")

def additional_packages_manual_menu():
    while True:
        print(f"\n{COLOR_YELLOW}Хотите установить дополнительный пакет? (введите название пакета или 0 для выхода){COLOR_RESET}")
        pkgname = input("Название пакета: ").strip()
        if pkgname == "" or pkgname == "0":
            print("Выход из меню дополнительных пакетов.")
            break
        print(f"Проверка, установлен ли пакет {pkgname}...")
        result = subprocess.run(['dpkg', '-s', pkgname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if result.returncode == 0:
            success(f"Пакет {pkgname} уже установлен.")
        else:
            warning(f"Пакет {pkgname} не найден. Пытаемся установить...")
            try:
                proc = subprocess.run(
                    ['apt', 'install', '-y', pkgname],
                    check=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.PIPE
                )
                success(f"Пакет {pkgname} успешно установлен.")
            except subprocess.CalledProcessError as e:
                error(f"Ошибка при установке пакета {pkgname}!")
                stderr_out = e.stderr.decode('utf-8') if e.stderr else "Детали ошибки недоступны."
                warning(stderr_out)

def main_menu():
    print_ascii_banner()
    print(f"{COLOR_YELLOW}Главное меню:{COLOR_RESET}")
    print("1. Полная установка (базовые пакеты и опции)")
    print("2. Установка дополнительного пакета")
    print("3. Установка Burp Suite Community")
    print("4. Выйти")
    while True:
        choice = input("Выберите действие (1-4): ").strip()
        if choice in ["1", "2", "3", "4"]:
            return choice
        else:
            warning("Неверный выбор! Введите 1, 2, 3 или 4.")

if __name__ == "__main__":
    if not is_root():
        error("Скрипт должен быть запущен от root. Используйте: sudo python3 script.py")
        sys.exit(1)

    action = main_menu()
    if action == "1":
        # Полная установка
        apt_update_upgrade()
        check_or_install_package('seclists', 'seclists')
        check_and_extract_rockyou()
        check_or_install_wpscan()
        check_or_install_burpsuite()
        additional_packages_manual_menu()
    elif action == "2":
        # Только установка дополнительных пакетов
        additional_packages_manual_menu()
    elif action == "3":
        # Установка Burp Suite Community
        check_or_install_burpsuite()
    elif action == "4":
        print("Выход.")
        sys.exit(0)
